name: Test for VS Internals

on:
  workflow_dispatch:
    branches: [ master ]

    
jobs:

  testStuffOut:
     name:   testStuffOut

     runs-on: windows-latest

     steps:
      - name: see if msbuild is installed
        run: |
          echo ls msbuild
          ls "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\\MSBuild\Current\Bin"

  # build database schema, build artifact is the dacpac
  buildDatabase:
    name:   buildDatabase    

    runs-on: windows-latest

    steps:
    # checkout code from repo
    - name: checkout repo
      uses: actions/checkout@v1

    - name: see contents of current directory
      run: |
        echo ls "./"
        ls "./"

    - name: see if msbuild is installed
      run: |
          echo ls msbuild
          ls "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\\MSBuild\Current\Bin\MSBuild.exe"
     

    # use msbuild to build VS solution which has the SSDT project
    - name: build solution
      run: |
            echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\\MSBuild\Current\Bin\MSBuild.exe MercuryHealthCore.sln -target:MercuryHealthDB:Rebuild"
            & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\\MSBuild\Current\Bin\MSBuild.exe" MercuryHealthCore.sln -target:MercuryHealthDB:Rebuild
      shell: pwsh

    - name: view built dacpac
      run: |
        echo GITHUB_WORKSPACE "$env:GITHUB_WORKSPACE"
        echo "ls MercuryHealthDB/bin/Debug/*.*"
        ls "MercuryHealthDB/bin/Debug/*.*"
        echo next
        ls "$env:GITHUB_WORKSPACE/MercuryHealthDB/bin/Debug/*.*"
        echo done
      shell: pwsh

     # publish build artifact (dacpac) back to github
    - name: publish build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
         name: db
         path: MercuryHealthDB\bin\Debug     

  # deploy new database schema using dacpac
  deployDB:
    name:   deployDB 
    needs: buildDatabase
    runs-on: windows-latest
    steps:
      - name: see if sqlpackage.exe exists
        run: ls "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\150"     
        
      # download build artifacts
      - name: download build artifacts
        uses: actions/download-artifact@master
        with: 
          name: db
          path: ${{env.DOTNET_ROOT}}/myDb
      # find where the dacpac is downloaded, make sure it's where i think it is
      - name: find dacpac
        run: |
          echo "look into db directory"
          cd ${{env.DOTNET_ROOT}}/myDb
          ls *.*
      # call sqlpackage.exe to deploy my db schema using my dacpac
      - name: update database schema using dacpac
        run: >
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\150\sqlpackage.exe" 
          /Action:Publish 
          /SourceFile:"${{env.DOTNET_ROOT}}/myDb\MercuryHealthDB.dacpac" 
          /TargetConnectionString:"${{ secrets.DATABASE_CONNECTION_STRING }}" 
          /p:BlockOnPossibleDataLoss=False
        
       